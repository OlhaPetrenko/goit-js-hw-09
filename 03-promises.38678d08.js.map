{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAWJ,SAASC,cAAc,mBAiCxCF,EAAOM,iBAAiB,UAExB,SAAkCC,EAAOC,EAAUC,GACjDF,EAAMG,iBACND,EAAQE,OAAOR,EAAaS,OAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAASO,MAAOC,GAAK,EAAG,CAG3C,SAASC,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAXPR,EAAWK,EACXJ,GAASE,OAAOP,EAAYQ,OAc5BE,EAAcN,EAAUC,GACrBe,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBlB,EAAA2B,OAAOC,QAAQ,uBAAqBX,QAAiBC,UAEtDW,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBlB,EAAA2B,OAAOG,QAAQ,sBAAoBb,QAAeC,UAGxDT,EAAMsB,cAAcC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nconst firstDelayEl = document.querySelector('[name=\"delay\"]');\nconst nextDelayEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\n\n// console.log(firstDelayEl);\n\n// ================================\n// один проміс\n\n// formEl.addEventListener('submit', createPromise);\n\n// function createPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n// createPromise(2, 1500)\n//   .then(mes => {\n//     console.log(mes);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });\n\n//\n// ===========================================================================\n\nformEl.addEventListener('submit', onBtnCreatePromiseEClick);\n\nfunction onBtnCreatePromiseEClick(event, position, delay) {\n  event.preventDefault();\n  delay = Number(firstDelayEl.value);\n  for (let i = 1; i <= amountEl.value; i += 1) {\n    position = i;\n    delay += Number(nextDelayEl.value);\n    function createPromise(position, delay) {\n      const promise = new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve({ position, delay });\n          } else {\n            reject({ position, delay });\n          }\n        }, delay);\n      });\n      return promise;\n    }\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$firstDelayEl","$47d4ff9957288465$var$nextDelayEl","$47d4ff9957288465$var$amountEl","addEventListener","event","position1","delay1","preventDefault","Number","value","i","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.38678d08.js.map"}